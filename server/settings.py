"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', '*h6r$glo%0j=z+_!1ibj1o-=x1)ish6nf*#$u9t()@*kcy8%*u')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DJANGO_DEBUG', True))

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'cake',
    'photo',
    'const'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'
# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Папка с файлами
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

STORAGE = os.environ.get('STORAGE', 'WEBDAV')
# Папка куда будут складываться файлы
STORAGE_DIR = os.environ.get('STORAGE_DIR', 'dev_photos')

if STORAGE == 'SFTP':
    # Класс хранения файлов
    DEFAULT_FILE_STORAGE = 'server.storage.SFTPFileSystemStorage'
elif STORAGE == 'WEBDAV':
    # Класс хранения файлов
    DEFAULT_FILE_STORAGE = 'server.storage.WebDavFileSystemStorage'

if DEBUG:
    from .dev import *
else:
    db_from_env = dj_database_url.config(conn_max_age=600)
    DATABASES['default'] = db_from_env

    if STORAGE == 'SFTP':
        # Подключение к удаленному SFTP серверу
        SFTP_STORAGE_HOST = os.environ.get('SFTP_STORAGE_HOST')
        SFTP_STORAGE_ROOT = os.environ.get('SFTP_STORAGE_ROOT', '/media/' + STORAGE_DIR)
        SFTP_STORAGE_PARAMS = {
            'username': os.environ.get('SFTP_USER_NAME'),
            'password': os.environ.get('SFTP_USER_PASSWORD'),
            'allow_agent': False,
            'look_for_keys': False,
        }
        SFTP_STORAGE_INTERACTIVE = False
    elif STORAGE == 'WEBDAV':
        # Подключение к удаленному Webdav серверу
        WEBDAV_URL = os.environ.get('WEBDAV_URL')
        WEBDAV_PUBLIC_URL = os.environ.get('WEBDAV_PUBLIC_URL')
